package main
//给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。 
//
// 设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。 
//
// 注意: 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。 
//
// 示例 1: 
//
// 输入: [3,3,5,0,0,3,1,4]
//输出: 6
//解释: 在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。
//     随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。 
//
// 示例 2: 
//
// 输入: [1,2,3,4,5]
//输出: 4
//解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。   
//     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。   
//     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
// 
//
// 示例 3: 
//
// 输入: [7,6,4,3,1] 
//输出: 0 
//解释: 在这个情况下, 没有交易完成, 所以最大利润为 0。 
// Related Topics 数组 动态规划 
// 👍 590 👎 0


//leetcode submit region begin(Prohibit modification and deletion)
func maxProfit(prices []int) int {
	//   [3,3,5,0,0,3,1,4] => 6
	/*
			状态：天数，是否持有股票，交易次数
			dp[i][j][k] : 在第i天交易某个股票
		    j = 0 不持有 j = 1持有
			dp[i][j][k]

			dp[i][0][0] = 0                   , j=0,k=0
		    //卖出过一次，最大利润有两种可能，要么是当天卖出，要么是之前卖出
		    dp[i][0][1]= max{ dp[i-1][1][0]+p[i], dp[i-1][0][1] }
		    dp[i][0][2]= max{ dp[i-1][1][1]+p[i], dp[i-1][0][2] }
		    // 买入过一次 股票是当天买入，or 股票之前就有
		    dp[i][1][0]= max{ dp[i-1][0][0]-p[i], dp[i-1][1][0] }
		   	dp[i][1][1]= max{ dp[i-1][0][1]-p[i], dp[i-1][1][1] }
			dp[i][1][2] = -99999

	*/

	dp := make([][][]int,0)
	for i := 0; i < len(prices); i++ {
		dpi := make([][]int,0)
		for j := 0; j < 2; j++ {
			dpj := make([]int,3)
			dpi = append(dpi,dpj)
		}
		dp = append(dp,dpi)
	}

	// 初始化
	// 处理第一天
	//假设第一天没有买入
	//dp[0][0][0] = 0;
	//dp[0][0][1] = 0;
	//dp[0][0][2] = 0;

	//第一天的k=1 k=2的情况都要处理下
	dp[0][1][0] = -prices[0]
	dp[0][1][1] = -prices[0]
	dp[0][0][2] = -prices[0]

	for i := 1; i < len(prices); i++ {
		p := prices[i]
		dp[i][0][0] = 0
		//卖出过一次，最大利润有两种可能，要么是当天卖出，要么是之前卖出
		dp[i][0][1]= max( dp[i-1][1][0]+p, dp[i-1][0][1] )
		dp[i][0][2]= max( dp[i-1][1][1]+p, dp[i-1][0][2] )
		// 买入过一次 股票是当天买入，or 股票之前就有
		dp[i][1][0]= max( dp[i-1][0][0]-p, dp[i-1][1][0] )
		dp[i][1][1]= max( dp[i-1][0][1]-p, dp[i-1][1][1] )
		dp[i][1][2] = 0
	}
	return max(dp[len(prices)-1][0][1],dp[len(prices)-1][0][2])
}
func max(a, b int) int {
	if a > b {
		return a
	}
	return b
}

//leetcode submit region end(Prohibit modification and deletion)
